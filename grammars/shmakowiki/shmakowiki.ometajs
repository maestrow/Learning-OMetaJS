// https://github.com/veged/shmakowiki/blob/master/src/shmakowiki.ometajs

ometa ShmakoWiki {
    oneOf :a ?(a.length == 1) = apply(a.pop()),
    oneOf :a ?(a.length > 1) = apply(a.pop()) | oneOf(a),

    escapedChar = '~' char:c -> c,
    escaped = escapedChar+:c -> [`escaped, c.join('')],

    b = seq('**'),
    i = seq('//'),
    u = seq('__'),
    s = ~' ' seq('--') ~' ',
    m = seq('##'),
    sup = seq('^^'),
    sub = seq(',,'),
    ext = seq('%%'),
    linkStart = seq('((') | seq('[['),
    linkEnd = seq('))') | seq(']]'),
    l = linkStart | linkEnd,
    lineBreak = seq('\\\\') -> [`lineBreak, []],
    special = (b | i | u | s | m | sup | sub | l | lineBreak):c -> [`special, c],

    between :t :n = (apply(t) -> ShmakoWiki.arrAdd(n, t)):nn (~oneOf(ShmakoWiki.arrCopy(nn)) allInline(nn))*:c apply(t) -> c,
    between_ :t = apply(t) (~special text)*:c (~~special | end) -> c,

    bold :n = between(`b, n):c -> [`bold, c],
    bold_ = between_(`b):c -> [`bold_, c],

    italic :n = between(`i, n):c -> [`italic, c],
    italic_ = between_(`i):c -> [`italic_, c],

    underline :n = between(`u, n):c -> [`underline, c],
    underline_ = between_(`u):c -> [`underline_, c],

    strike :n = between(`s, n):c -> [`strike, c],
    strike_ = between_(`s):c -> [`strike_, c],

    monospace :n = between(`m, n):c -> [`monospace, c],
    monospace_ = between_(`m):c -> [`monospace_, c],

    superscript :n = between(`sup, n):c -> [`superscript, c],
    superscript_ = between_(`sup):c -> [`superscript_, c],

    subscript :n = between(`sub, n):c -> [`subscript, c],
    subscript_ = between_(`sub):c -> [`subscript_, c],

    link :n = (linkStart -> ShmakoWiki.arrAdd(n, 'l')):nn
              (~space ~linkEnd char)+:c spacesNoNl
              (~oneOf(ShmakoWiki.arrCopy(nn)) allInline(nn))*:cc
              linkEnd -> [`link, c.join(''), cc],
    link_ = linkStart (~space char)+:c (~~space | ~~special | end) -> [`link_, c.join('')]
          | linkEnd -> '',

    mdash = seq(' -- ') -> ' â€“ ',

    text = (~special ~escapedChar (mdash | char))+:c -> c.join('')
           | escaped:c -> c,

    inline :n = bold(n) | italic(n) | underline(n)
              | strike(n) | monospace(n)
              | superscript(n) | subscript(n)
              | link(n)
              | lineBreak | text,
    inline_ = bold_ | italic_ | underline_
            | superscript_ | subscript_
            | strike_ | monospace_
            | link_,

    allInline :n = inline(n) | (~inline(n) inline_),
    topInline = allInline([])+,


    noNlSpace = (~'\n' space), //quantifiers to be used in-place
    spacesNoNl = noNlSpace*,

    spacesNlSpaces = spacesNoNl '\n' spacesNoNl ~end -> ' ',

    nl = '\n' (spacesNoNl '\n')+,

    headerStart = '='+:c noNlSpace* -> (c.length - 1),
    headerEnd = '\n' (noNlSpace* '\n')* | end,
    headerAnchor = '='+ (~'\n' char)*:a -> a.join('') | empty -> '',

    header = headerStart:l ((~headerEnd ~'=' char)+:cc -> cc.join('')):c headerAnchor:anchor headerEnd ->
                { var hAST = ShmakoWiki.matchAll(c, 'topInline'),
                      hAnchor = utils.transliterate('ru', anchor.length ? anchor : ShmakoWikiToPlain.match(hAST, 'topLevel'));
                  ['header' + (l <= 6 ? l : 6), hAST, hAnchor] },

    blockEnd = ('\n' ~~extBlockStart)
             | ('\n' (noNlSpace* '\n')+)
             | ('\n' ~~listStart)
             | ('\n' ~~headerStart)
             | ('\n'* end),

    para = ((~blockEnd (noNlSpace* '\n' noNlSpace* ~end -> ' ' | char))+:c -> c.join(''))
        blockEnd -> [`para, ShmakoWiki.matchAll(c, 'topInline')],

    listStart = noNlSpace* bullet,

    uliBullet = '*' ~'*' noNlSpace* -> 'u',
    oliBullet = digit+ '.' noNlSpace* -> 'o',

    bullet = uliBullet | oliBullet,
    bullet1 :t = apply(t + 'liBullet'),

    listItemContent = (~blockEnd char)+:c -> ShmakoWiki.matchAll(c.join(''), 'topInline'),

    listItem :t :n =
        ' '*:s ?(n == s.length) bullet1(t)
        listItemContent:p ('\n' | end)
        list1(n+1)*:b -> [t+`listItem, p.concat(b)],

    list = list1(0),
    list1 :n =
        ~~(noNlSpace*:s bullet:b) ?(n <= s.length)
        listItem(b,s.length)+:ss
        ('\n' noNlSpace*)* -> [b+`list, ss],


    extBlockStart = ((ext char:t '%') -> t | ext -> ''):tt
                    (~space char)*:c spacesNoNl (~'\n' char)*:cc '\n' -> [tt, c.join(''), cc.join('')],
    extBlockEnd :t ?(t.length == 0) = space* ext,
    extBlockEnd char:t ?(t.length > 0) = space* '%' seq(t) ext,

    extBlock = extBlockStart:s
               ((~extBlockEnd(s[0]) char)+:cc -> cc.join('')):c
               extBlockEnd(s[0]) (blockEnd | '\n') -> [`extension, s[1],
                   utils.getExtension(s[1], 'shmakowikiToAst')(c, s[2]), s[2]],

    allBlock = extBlock | list | header | para,

    topLevel = (spacesNoNl '\n')* allBlock+:t -> t
}

ShmakoWiki.arrJoin = function(arr1, arr2) {
    var newArr = ShmakoWiki.arrCopy(arr1);
    for (var i = 0; i < arr2.length; i++) {
       newArr[newArr.length] = arr2[i];
    }
    return newArr;
};

ShmakoWiki.arrCopy = function(arr) {
    var newArr = [];
    for (var i = 0; i < arr.length; i++) {
       newArr[newArr.length] = arr[i];
    }
    return newArr;
};

ShmakoWiki.arrAdd = function(arr, elem) {
    for (var i = 0; i < arr.length; i++) {
       if (arr[i] == elem) return arr;
    }
    arr[arr.length] = elem;
    return arr;
};